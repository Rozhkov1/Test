Выбор базы данных
	USE
	
Группировка значений столбца
	GROUP BY your_column_name;
	
Добавление новых рядов в таблицы
	INSERT INTO…VALUES

Добавление ПЕРВИЧНОГО КЛЮЧА в существующую таблицу
	ALTER TABLE your_table
	ADD COLUMN car_id INT NOT NULL AUTO_INCREMENT FIRST,
	ADD PRIMARY KEY (car_id);
	
Добавление ВНЕШНЕГО КЛЮЧА в существующую таблицу
	ALTER TABLE easy_drinks 
	ADD COLUMN dir_id INT NOT NULL DEFAULT 0,
	ADD CONSTRAINT easy_drinks_dir_id_fk 
	FOREIGN KEY (dir_id) 
	REFERENCES easy_drinks (dir_id);

Добавление столбца
	ALTER TABLE your_table
	ADD COLUMN your_column_name VARCHAR(30)
	AFTER your_column_name;

Избавиться от дубликатов
	DISTINCT your_column_name;
	
Изменение таблиц
	ALTER TABLE

Изменение только типа данных
	MODIFY (MODIFY COLUMN your_name VARCHAR(120));
	
Изменение имени и типа данных столбца
	CHANGE; (CHANGE COLUMN old_name new_name VARCHAR(100));
	

Обновление значения, проверяя значение существующего столбца по условию
	CASE;
	UPDATE your_table
	SET your_column_name=
	CASE
		WHEN your_column_name= value1
			THEN new_value1
		WHEN your_column_name=value2
			THEN new_value2
		ELSE value3
		END;
	
Обновление существующих рядов таблиц
	UPDATE (UPDATE your_table SET your_column_name= 123 WHERE your_column_name=321);
	
Ограничение результатов выборки
	LIMIT 2;
	LIMIT 0,4; (0 - номер начальной записи, 4 - количество возвращаемых результатов) Получить песни с 20 по 30 - LIMIT 19,10;
	нумерация начинается с 0;
	
Очистка таблиц
	TRUNCATE TABLE — полностью очищает содержимое таблицы.
	
Переименование
	RENAME old_name TO new_name;
	
Просмотр таблиц, структуры таблиц, баз данных:
	DESCRIBE
	SHOW
	
Представления:
	Создание: 
		CREATE VIEW your_table AS
				(your_query);
	
	Использование представления:
		SELECT * FROM your_view_name;
	
	Удаление:
		DROP VIEW your_view_name;
		
Пользователи:
	Задание пароля для root-пользователя:
		SET PASSWORD FOR 'root'@'localhost' = PASSWORD('your_password');
	Показать пользователей в MySQL:	
		SELECT User, Host FROM mysql.user;(база данных mysql, таблица user)
	Предоставить разрешение пользователю:
		GRANT SELECT ON your_table TO your_user;(Разрешить пользователю your_user выполнять команду SELECT с таблицей your_table)
		GRANT ALL - разрешение всех операций
		database_name.* - все таблицы в базе данных
	Лишить пользователя разрешения на операцию:
		REVOKE SELECT ON your_table FROM your_user;
	Создание пользователя:
		CREATE USER your_user IDENTIFIED BY 'No234iuy'; (No234iuy - пароль для пользователя)
	Объединение CREATE USER с GRANT:
		GRANT SELECT ON your_table TO your_user IDENTIFIED BY 'No234iuy';
	Какая учетная запись используется:
		SELECT CURRENT_USER;
	
Сортировка
	ORDER BY
	ORDER BY your_column_name DESC - сортировка по убыванию; (descending)
	select sort_field from tableName ORDER BY binary(sort_field);

Создание таблицы с первичным ключом, кот. немедленно заполняется командой SELECT:
	CREATE TABLE your_table(
	id INT(11) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	your_column_name VARCHAR(20)
	) AS
	SELECT your_column_name FROM your_table
	GROUP BY your_column_name
	ORDER BY your_column_name;
	
Сохранение результатов в таблицу
	CREATE TABLE your_table AS
	SELECT your_column_name FROM your_table;
	
Транзакция
	START TRANSACTION; - начало транзакции
	COMMIT; - закрепление результатов выполненной транзакции
	ROLLBACK; - возвращение базы данных к исходному состоянию (до транзакции)
	
Удаление таблиц
	DROP TABLE

Удаление баз данных
	DROP DATABASE

Удаление столбца из таблицы
	ALTER TABLE your_table
	DROP COLUMN your_column_name;
	
Удаление строк (рядов) из таблиц
	DELETE
	DELETE FROM your_table - - удаляет все данные из таблицы
	WHERE ...	- удаляет строки;

	LIKE (LIKE '%...' OR LIKE '_...')
Ищет часть текстовой строки и возвращает совпадения
% - любое количество неизвестных символов
_ - один символ

	IN
возвращает значения, кот. входят в заданный набор значений

	NOT IN
возвращает значения, кот. НЕ входят в заданный набор значений

				
				
				
				
				
				ФУНКЦИИ
Извлечь часть данных из столбца
	RIGHT(), LEFT()

Выборка всех символов до запятой
	SUBSTRING_INDEX(your_column_name, ',', 1) FROM your_table; 1 - первая запятая, ',' - искомый символ;
	UPDATE your_table SET your_column_name = SUBSTRING_INDEX(your_column_name, ',', 1);
	
Удаление части данных из столбца
	SUBSTR;
	UPDATE your_table
	SET your_column_name = SUBSTR(your_column_name, LENGTH(your_column_name1)+2);- заменить содержимое столбца your_column_name тем,
	что	в нем хранится сейчас, с удалением символов, скопированных в your_column_name1, запятой и пробела;
	
	SUM(your_column_name) - суммирует значения столбца;
	
	AVG(your_column_name) - вычисляет среднее значение;
	
	MAX(your_column_name),MIN(your_column_name)- Возвращает максимальное (минимальное) значение столбца;
	
	COUNT(your_column_name) - возвращает количество записей в столбце;

Внешний ключ создается в структуре, называемой ОГРАНИЧЕНИЕМ. (ОГРАНИЧЕНИЕ - это своего рода правило, которое должно выполняться таблицей.)
При вставке ВНЕШНИЙ КЛЮЧ будет принимать только значения, существующие в ПЕРВИЧНОМ КЛЮЧЕ родительской таблицы. Это требование называется
ЦЕЛОСТНОСТЬЮ ДАННЫХ.

Создание таблицы с ВНЕШНИМ КЛЮЧОМ - стр.330

Связи между таблицами:
"один-к-одному" - ровно одна запись родительской таблицы связывается с одной записью дочерней таблицы,
"один-ко-многим" - запись в т. А может быть связана со многими записями в т.Б, но запись в т.Б может быть связана только с одной записью в т.А,
"многие-ко-многим" - в соединительной таблице хранятся ПЕРВИЧНЫЕ КЛЮЧИ двух связываемых таблиц, состоит из 2-х связей "один-ко-многим"
и соединительной таблицы;

1НФ:
-столбцы содержат только атомарные значения.
-в таблице нет повторяющихся групп данных.

СОСТАВНЫМ КЛЮЧОМ наз. ПЕРВИЧНЫЙ КЛЮЧ, состоящий из нескольких столбцов, комбинация кот. образует уникальные значения.

ФУНКЦИОНАЛЬНАЯ ЗАВИСИМОСТЬ - изменение содержимого одного столбца приводит к изменению другого;
ЧАСТИЧНАЯ ФУНКЦИОНАЛЬНАЯ ЗАВИСИМОСТЬ - не-ключевой столбец зависит от некоторых, но не от всех столбцов СОСТАВНОГО ПЕРВИЧНОГО КЛЮЧА.
ТРАНЗИТИВНАЯ ЗАВИСИМОСТЬ - изменение не-ключевого столбца может привести к изменению других столбцов;

2НФ:
-таблица находится в 1НФ;
-таблица не имеет частичных функциональных зависимостей;

3НФ:
-таблица находится в 2НФ;
-таблица не имеет транзитивных зависимостей;	

ВНУТРЕННИМ СОЕДИНЕНИЕМ (INNER JOIN) называется перекрестное соединение, из результатов которого часть записей исключается
по условию запроса. Оно комбинирует записи из 2х таблиц с заданным условием.
SELECT somecolumns
FROM table1
INNER JOIN
table2
ON somecondition;

ЭКВИСОЕДИНЕНИЕ - внутреннее соединение с проверкой равенства. (...ON your_column_name1 = your_column_name2)
НЕЭКВИВАЛЕНТНОЕ СОЕДИНЕНИЕ - проверяет несовпадение значений (... ON your_column_name1 <> your_column_name2)
ЕСТЕСТВЕННОЕ СОЕДИНЕНИЕ - связывает записи по значениям одноименных столбцов 
SELECT boys.boy, toys.toys
FROM boys
NATURAL JOIN
toys;

НЕКОРРЕЛИРОВАННЫЙ ПОДЗАПРОС - подзапрос, кот. существует сам по себе и не содержит ссылок на данные внешнего запроса
(не зависит от данных внешнего запроса);

КОРРЕЛИРОВАННЫЙ ПОДЗАПРОС - подзапрос, кот. зависит от значений, возвращаемых внешним запросом.

ЛЕВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ(LEFT OUTER JOIN) - перебирает все записи левой таблицы и ищет для каждой соответствие среди записей
	правой таблицы. Таблица, следующая после FROM, но до JOIN, считается "левой", а таблица, следующая после join, считается "правой".
	Значение NULL в результатах левого внешнего соединения означает, что правая таблица не содержит значений, соотв. левой таблице.
SELECT girl, toy
FROM toys
LEFT OUTER JOIN
girls
ON girls.toy_id = toys.toy_id;

ПРАВОЕ ВНЕШНЕЕ СОЕДИНЕНИЕ(RIGHT OUTER JOIN) - то же, что и левое, только наоборот.

РЕФЛЕКСИВНЫЙ ВНЕШНИЙ КЛЮЧ - 
САМОСОЕДИНЕНИЕ - запрос к одной таблице строится так, как если бы она была двумя таблицами, содержащими одинаковую инфо.
СОЮЗ (UNION) - обьединяет несколько запросов к нескольким таблицам в одну таблицу результатов.
	SELECT title FROM job_current
	UNION
	SELECT title FROM job_desired
	UNION
	SELECT title FROM job_listing
	ORDER BY title; (дубликаты исключаются)
	
Во избежание многократного ввода одних и тех же запросов используются ПРЕДСТАВЛЕНИЯ.
	CREATE VIEW your_table AS
	(your_query);
	
ТРАНЗАКЦИЯ - набор команд SQL (операций), кот. выполняются как единое целое. Если в ходе транзакции не удается выполнить хотя бы
	одну операцию, то не выполняется ни одна операция. Изменения вносятся только при выполнении команды COMMIT.
	

	

	

	
	




	

 





















Обслуживание
	ANALYZE TABLE — анализирует таблицу.
	CHECK TABLE — проверяет таблицу.
	CHECKSUM TABLE — сообщает контрольную сумму таблицы.
	OPTIMIZE TABLE — оптимизирует таблицу.
	REPAIR TABLE — осуществляет восстановление (ремонт) поврежденных таблиц.

Комплексное восстановление, проверка и оптимизация всех таблиц в БД MySQL
Данные команды, введённые в консоли, помогут тотально восстановить, проверить и оптимизировать все таблицы во всех базах данных установленного MySQL сервера.

mysqlcheck -u root -p --auto-repair --all-databases 
mysqlcheck -u root -p --check --all-databases 
mysqlcheck -u root -p --optimize --all-databases
или так:
mysqlcheck -Ao
Здесь: ключ A проверяет таблицы на ошибки, а ключ o производит оптимизацию.

Backup
	BACKUP TABLE — копирует в резервный каталог минимальный набор файлов таблицы, необходимый для ее последующего восстановления, после сброса всех буферизованных изменений на диск.
	RESTORE TABLE — восстанавливает таблицу из резервной копии.
Other